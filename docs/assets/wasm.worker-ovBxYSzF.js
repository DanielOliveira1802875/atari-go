(function(){"use strict";let s=null;self.onmessage=async n=>{const{type:o,payload:a}=n.data;if(o==="init")try{self.Module={locateFile:r=>`/atari-go/wasm/${r}`,onRuntimeInitialized:()=>{s={getBestMove:self.Module.cwrap("getBestMove","string",["string"]),checkCapture:self.Module.cwrap("checkCapture","string",["string"])},self.postMessage({type:"initialized"})},print:r=>{console.log("WASM stdout:",r)},printErr:r=>{console.error("WASM stderr:",r)}};const t=await(await fetch("/atari-go/wasm/atari_go.js")).text(),l=new Blob([t],{type:"application/javascript"}),i=URL.createObjectURL(l);await import(i),URL.revokeObjectURL(i)}catch(e){const t=e instanceof Error?e.message:String(e);self.postMessage({type:"error",payload:t})}else if(o==="getBestMove"){if(!s){self.postMessage({type:"error",payload:"WebAssembly module not initialized"});return}try{const e=s.getBestMove(a);self.postMessage({type:"moveDone",payload:e})}catch(e){const t=e instanceof Error?e.message:String(e);self.postMessage({type:"error",payload:t})}}else if(o==="checkCapture"){if(!s){self.postMessage({type:"error",payload:"WebAssembly module not initialized"});return}try{const e=s.checkCapture(a);self.postMessage({type:"checkCaptureDone",payload:e})}catch(e){const t=e instanceof Error?e.message:String(e);self.postMessage({type:"error",payload:t})}}}})();
