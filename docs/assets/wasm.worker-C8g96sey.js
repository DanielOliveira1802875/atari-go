(function(){"use strict";let s=null;const n="/atari-go/wasm/";self.onmessage=async c=>{const{type:a,payload:i}=c.data;if(a==="init"){const{fileName:e}=i;if(!e){self.postMessage({type:"error",payload:"Initialization error: A 'fileName' must be provided, e.g., 'atari-go-9x9'."});return}try{self.Module={locateFile:o=>`${n}${o}`,onRuntimeInitialized:()=>{s={getBestMove:self.Module.cwrap("getBestMove","string",["string"]),checkCapture:self.Module.cwrap("checkCapture","string",["string"])},self.postMessage({type:"initialized"})},print:o=>{console.log("WASM stdout:",o)},printErr:o=>{console.error("WASM stderr:",o)}};const t=`${n}${e}.js`,r=await fetch(t);if(!r.ok)throw new Error(`Failed to fetch script at ${t}: ${r.statusText}`);const p=await r.text(),g=new Blob([p],{type:"application/javascript"}),l=URL.createObjectURL(g);await import(l),URL.revokeObjectURL(l)}catch(t){const r=t instanceof Error?t.message:String(t);self.postMessage({type:"error",payload:r})}}else if(a==="getBestMove"){if(!s){self.postMessage({type:"error",payload:"WebAssembly module not initialized"});return}try{const e=s.getBestMove(i);self.postMessage({type:"moveDone",payload:e})}catch(e){const t=e instanceof Error?e.message:String(e);self.postMessage({type:"error",payload:t})}}else if(a==="checkCapture"){if(!s){self.postMessage({type:"error",payload:"WebAssembly module not initialized"});return}try{const e=s.checkCapture(i);self.postMessage({type:"checkCaptureDone",payload:e})}catch(e){const t=e instanceof Error?e.message:String(e);self.postMessage({type:"error",payload:t})}}}})();
